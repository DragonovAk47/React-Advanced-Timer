{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Grindelwald\\\\Desktop\\\\app1\\\\src\\\\components\\\\AdvancedTimer.js\";\nimport React, { Component } from 'react';\nimport Time from '../lib/Time';\nimport keyPad from './keyPad';\n\nclass ReactTimer extends Component {\n  constructor(props) {\n    super(props);\n\n    this.onFocusChange = Unit => {\n      this.setState({\n        timeUnit: Unit\n      });\n    };\n\n    this.InputHandler = val => {\n      const seconds = parseInt(val);\n\n      if (seconds && this.state.timeUnit === 'h') {\n        this.setState({\n          hrs: seconds,\n          time: seconds * 1000\n        });\n      } else if (seconds && this.state.timeUnit === 'm') {\n        this.setState({\n          min: seconds,\n          time: seconds * 1000\n        });\n      } else if (seconds && this.state.timeUnit === 's') {\n        this.setState({\n          sec: seconds,\n          time: seconds * 1000\n        });\n      }\n    };\n\n    this.startHandler = () => {\n      if (this.state.status !== 'start') {\n        this.interval = setInterval(() => {\n          if (this.state.time !== 0 && this.state.time > 0) {\n            this.setState(prevState => ({\n              time: prevState.time - 10\n            }));\n          } else {\n            this.setState({\n              time: 0\n            });\n            clearInterval(this.interval);\n          }\n        }, 10);\n        this.setState({\n          status: 'start'\n        });\n      }\n    };\n\n    this.stopHandler = () => {\n      console.log(this.state.time);\n\n      if (this.state.status && this.state.status === 'start') {\n        clearInterval(this.interval);\n        this.setState(prevState => {\n          return {\n            status: 'stopped'\n          };\n        });\n      }\n    };\n\n    this.resetHandler = () => {\n      clearInterval(this.interval);\n      this.setState(() => ({\n        status: null,\n        time: 0\n      }));\n    };\n\n    this.state = {\n      time: 0,\n      hrs: 0,\n      min: 0,\n      sec: 0,\n      timeUnit: null,\n      status: false\n    };\n  }\n\n  componentWillUnmount() {\n    clearInterval(this.interval);\n  }\n\n  render() {\n    const time = new Time();\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 99\n      },\n      __self: this\n    }, time.getTime(this.state.time), this.state.status !== 'start' && React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 102\n      },\n      __self: this\n    }, React.createElement(\"input\", {\n      onFocus: () => this.onFocusChange('h'),\n      value: this.state.hrs,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 103\n      },\n      __self: this\n    }), React.createElement(\"input\", {\n      onFocus: () => this.onFocusChange('m'),\n      value: this.state.min,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 104\n      },\n      __self: this\n    }), React.createElement(\"input\", {\n      onFocus: () => this.onFocusChange('s'),\n      value: this.state.sec,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 105\n      },\n      __self: this\n    }), React.createElement(\"keyPad\", {\n      handler: this.InputHandler,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 106\n      },\n      __self: this\n    }), React.createElement(\"button\", {\n      className: \"btn btn-lg btn-success\",\n      onClick: this.startHandler,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 107\n      },\n      __self: this\n    }, \"start\")), React.createElement(\"button\", {\n      className: \"btn btn-lg btn-primary\",\n      onClick: this.resetHandler,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 111\n      },\n      __self: this\n    }, \"Reset\"), this.state.status === 'start' && React.createElement(\"button\", {\n      className: \"btn btn-lg btn-dark\",\n      onClick: this.stopHandler,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 113\n      },\n      __self: this\n    }, \"Stop\"));\n  }\n\n}\n\nexport default ReactTimer;","map":{"version":3,"sources":["C:/Users/Grindelwald/Desktop/app1/src/components/AdvancedTimer.js"],"names":["React","Component","Time","keyPad","ReactTimer","constructor","props","onFocusChange","Unit","setState","timeUnit","InputHandler","val","seconds","parseInt","state","hrs","time","min","sec","startHandler","status","interval","setInterval","prevState","clearInterval","stopHandler","console","log","resetHandler","componentWillUnmount","render","getTime"],"mappings":"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","sourcesContent":["import React,{Component} from 'react';\r\nimport Time from '../lib/Time'\r\nimport keyPad from './keyPad'\r\nclass ReactTimer extends Component {\r\n    constructor(props){\r\n        super(props)\r\n        this.state = {\r\n            time:0,\r\n            hrs:0,\r\n            min:0,\r\n            sec:0,\r\n            timeUnit:null,\r\n            status:false\r\n        }\r\n    }\r\n    componentWillUnmount() {\r\n        clearInterval(this.interval);\r\n    }\r\n    onFocusChange = (Unit) =>\r\n    {\r\n          this.setState({\r\n            timeUnit:Unit\r\n          })\r\n    }\r\n    InputHandler = (val) =>\r\n    {\r\n\r\n        const seconds = parseInt(val);\r\n        if(seconds&&this.state.timeUnit==='h')\r\n        {\r\n            this.setState({\r\n                hrs:seconds,\r\n                time:seconds*1000\r\n            })\r\n        }\r\n        else if (seconds&&this.state.timeUnit==='m') \r\n        {\r\n            this.setState({\r\n                min:seconds,\r\n                time:seconds*1000\r\n            })\r\n        }\r\n        else if(seconds&&this.state.timeUnit==='s')\r\n        {\r\n            this.setState({\r\n                sec:seconds,\r\n                time:seconds*1000\r\n            })\r\n        }\r\n\r\n\r\n    }\r\n    startHandler = () =>\r\n    {\r\n        if(this.state.status!=='start'){\r\n            this.interval = setInterval(() => \r\n            {\r\n                if(this.state.time!==0&&this.state.time>0)\r\n                {\r\n                    this.setState((prevState) => ({time:prevState.time -10}))\r\n                }\r\n                else\r\n                {\r\n                    this.setState({\r\n                        time:0\r\n                    })\r\n                    clearInterval(this.interval);\r\n                }\r\n            },10)\r\n            this.setState({\r\n                status:'start'\r\n            });\r\n          }\r\n    }\r\n    stopHandler = () => {\r\n        console.log(this.state.time)\r\n        if (this.state.status && this.state.status === 'start') {\r\n\r\n            clearInterval(this.interval);\r\n            \r\n            this.setState((prevState) => {\r\n                return ({\r\n                    status: 'stopped',\r\n                });\r\n            });\r\n        }\r\n    }\r\n    resetHandler = () =>\r\n    {\r\n        clearInterval(this.interval);\r\n\r\n        this.setState(() => ({ status: null, time: 0 }));\r\n    }\r\n    \r\n    \r\n    render(){\r\n       const time = new Time();\r\n    return (\r\n        <div>\r\n        {time.getTime(this.state.time)}\r\n        {this.state.status!=='start' &&\r\n            <div>\r\n            <input onFocus = {() => this.onFocusChange('h')} value = {this.state.hrs} />\r\n            <input onFocus = {() => this.onFocusChange('m')} value = {this.state.min} />\r\n            <input onFocus = {() => this.onFocusChange('s')} value = {this.state.sec} />\r\n            <keyPad handler = {this.InputHandler} />\r\n            <button className=\"btn btn-lg btn-success\" onClick = {this.startHandler}>start</button>\r\n            </div>\r\n        }\r\n        \r\n        <button className=\"btn btn-lg btn-primary\" onClick = {this.resetHandler}>Reset</button>\r\n        {this.state.status==='start' &&\r\n            <button className=\"btn btn-lg btn-dark\" onClick = {this.stopHandler}>Stop</button>\r\n        }\r\n        </div>\r\n        )\r\n}\r\n}\r\n\r\nexport default ReactTimer\r\n"]},"metadata":{},"sourceType":"module"}