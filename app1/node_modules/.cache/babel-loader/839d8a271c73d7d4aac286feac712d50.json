{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Grindelwald\\\\Desktop\\\\app1\\\\src\\\\components\\\\AdvancedTimer.js\";\nimport React, { Component } from 'react';\nimport Time from '../lib/Time';\nimport KeyPad from './KeyPad';\n\nclass AdvancedTimer extends Component {\n  constructor(props) {\n    super(props);\n\n    this.onFocusChange = Unit => {\n      this.setState({\n        timeUnit: Unit\n      });\n    };\n\n    this.InputHandler = seconds => {\n      if (seconds && this.state.timeUnit === 'h') {\n        hours = parseInt(this.formatTime(prevState.hours + hours));\n      } else if (seconds && this.state.timeUnit === 'm') {\n        this.setState({\n          min: seconds,\n          time: seconds * 1000 * 60\n        });\n      } else if (seconds && this.state.timeUnit === 's') {\n        this.setState({\n          sec: seconds,\n          time: seconds * 1000\n        });\n      }\n    };\n\n    this.startHandler = () => {\n      if (this.state.status !== 'start') {\n        this.interval = setInterval(() => {\n          if (this.state.time !== 0 && this.state.time > 0) {\n            this.setState(prevState => ({\n              time: prevState.time - 10\n            }));\n          } else {\n            this.setState({\n              time: 0\n            });\n            clearInterval(this.interval);\n          }\n        }, 10);\n        this.setState({\n          status: 'start'\n        });\n      }\n    };\n\n    this.stopHandler = () => {\n      console.log(this.state.time);\n\n      if (this.state.status && this.state.status === 'start') {\n        clearInterval(this.interval);\n        this.setState(prevState => {\n          return {\n            status: 'stopped'\n          };\n        });\n      }\n    };\n\n    this.resetHandler = () => {\n      clearInterval(this.interval);\n      this.setState(() => ({\n        status: null,\n        time: 0\n      }));\n    };\n\n    this.state = {\n      time: 0,\n      hrs: 0,\n      min: 0,\n      sec: 0,\n      timeUnit: null,\n      status: false\n    };\n  }\n\n  componentWillUnmount() {\n    clearInterval(this.interval);\n  }\n\n  formatTime(time) {\n    time = parseInt(time);\n    return time < 10 ? '0' + time : time.toString().slice(time.toString().length - 2);\n  }\n\n  render() {\n    const time = new Time();\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 102\n      },\n      __self: this\n    }, time.getTime(this.state.time), this.state.status !== 'start' && React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 105\n      },\n      __self: this\n    }, React.createElement(\"input\", {\n      onFocus: () => this.onFocusChange('h'),\n      value: this.state.hrs,\n      maxLength: \"2\",\n      placeholder: \"00\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 106\n      },\n      __self: this\n    }), React.createElement(\"input\", {\n      onFocus: () => this.onFocusChange('m'),\n      value: this.state.min,\n      maxLength: \"2\",\n      placeholder: \"00\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 108\n      },\n      __self: this\n    }), React.createElement(\"input\", {\n      onFocus: () => this.onFocusChange('s'),\n      value: this.state.sec,\n      maxLength: \"2\",\n      placeholder: \"00\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 110\n      },\n      __self: this\n    }), React.createElement(KeyPad, {\n      InputHandler: this.InputHandler,\n      status: this.state.status,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 112\n      },\n      __self: this\n    }), React.createElement(\"button\", {\n      className: \"btn btn-lg btn-success\",\n      onClick: this.startHandler,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 113\n      },\n      __self: this\n    }, \"start\")), React.createElement(\"button\", {\n      className: \"btn btn-lg btn-primary\",\n      onClick: this.resetHandler,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 117\n      },\n      __self: this\n    }, \"Reset\"), this.state.status === 'start' && React.createElement(\"button\", {\n      className: \"btn btn-lg btn-dark\",\n      onClick: this.stopHandler,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 119\n      },\n      __self: this\n    }, \"Stop\"));\n  }\n\n}\n\nexport default AdvancedTimer;","map":{"version":3,"sources":["C:/Users/Grindelwald/Desktop/app1/src/components/AdvancedTimer.js"],"names":["React","Component","Time","KeyPad","AdvancedTimer","constructor","props","onFocusChange","Unit","setState","timeUnit","InputHandler","seconds","state","hours","parseInt","formatTime","prevState","min","time","sec","startHandler","status","interval","setInterval","clearInterval","stopHandler","console","log","resetHandler","hrs","componentWillUnmount","toString","slice","length","render","getTime"],"mappings":"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","sourcesContent":["import React,{Component} from 'react';\r\nimport Time from '../lib/Time'\r\nimport KeyPad from './KeyPad'\r\nclass AdvancedTimer extends Component {\r\n    constructor(props){\r\n        super(props)\r\n        this.state = {\r\n            time:0,\r\n            hrs:0,\r\n            min:0,\r\n            sec:0,\r\n            timeUnit:null,\r\n            status:false\r\n        }\r\n    }\r\n    componentWillUnmount() {\r\n        clearInterval(this.interval);\r\n    }\r\n    onFocusChange = (Unit) =>\r\n    {\r\n\r\n          this.setState({\r\n            timeUnit:Unit\r\n          })\r\n    }\r\n    formatTime(time) {\r\n        time = parseInt(time);\r\n        return time < 10 ? '0' + time : time.toString().slice(time.toString().length - 2);\r\n    }\r\n    InputHandler = (seconds) =>\r\n    {\r\n        \r\n        if(seconds&&this.state.timeUnit==='h')\r\n        {\r\n\r\n             hours = parseInt(this.formatTime(prevState.hours + hours));\r\n\r\n        }\r\n        else if (seconds&&this.state.timeUnit==='m') \r\n        {\r\n            this.setState({\r\n                min:seconds,\r\n                time:seconds*1000*60\r\n            })\r\n        }\r\n        else if(seconds&&this.state.timeUnit==='s')\r\n        {\r\n            this.setState({\r\n                sec:seconds,\r\n                time:seconds*1000\r\n            })\r\n        }\r\n\r\n\r\n    }\r\n    startHandler = () =>\r\n    {\r\n        if(this.state.status!=='start'){\r\n            this.interval = setInterval(() => \r\n            {\r\n                if(this.state.time!==0&&this.state.time>0)\r\n                {\r\n                    this.setState((prevState) => ({time:prevState.time -10}))\r\n                }\r\n                else\r\n                {\r\n                    this.setState({\r\n                        time:0\r\n                    })\r\n                    clearInterval(this.interval);\r\n                }\r\n            },10)\r\n            this.setState({\r\n                status:'start'\r\n            });\r\n          }\r\n    }\r\n    stopHandler = () => {\r\n        console.log(this.state.time)\r\n        if (this.state.status && this.state.status === 'start') {\r\n\r\n            clearInterval(this.interval);\r\n            \r\n            this.setState((prevState) => {\r\n                return ({\r\n                    status: 'stopped',\r\n                });\r\n            });\r\n        }\r\n    }\r\n    resetHandler = () =>\r\n    {\r\n        clearInterval(this.interval);\r\n\r\n        this.setState(() => ({ status: null, time: 0 }));\r\n    }\r\n    \r\n    \r\n    render(){\r\n       const time = new Time();\r\n    return (\r\n        <div>\r\n        {time.getTime(this.state.time)}\r\n        {this.state.status!=='start' &&\r\n            <div>\r\n            <input onFocus = {() => this.onFocusChange('h')} value = {this.state.hrs} maxLength=\"2\"\r\n                                placeholder=\"00\" />\r\n            <input onFocus = {() => this.onFocusChange('m')} value = {this.state.min} maxLength=\"2\"\r\n                                placeholder=\"00\" />\r\n            <input onFocus = {() => this.onFocusChange('s')} value = {this.state.sec} maxLength=\"2\"\r\n                                placeholder=\"00\" />\r\n             <KeyPad InputHandler={this.InputHandler} status={this.state.status} /> \r\n            <button className=\"btn btn-lg btn-success\" onClick = {this.startHandler}>start</button>\r\n            </div>\r\n        }\r\n        \r\n        <button className=\"btn btn-lg btn-primary\" onClick = {this.resetHandler}>Reset</button>\r\n        {this.state.status==='start' &&\r\n            <button className=\"btn btn-lg btn-dark\" onClick = {this.stopHandler}>Stop</button>\r\n        }\r\n        </div>\r\n        )\r\n}\r\n}\r\n\r\nexport default AdvancedTimer\r\n"]},"metadata":{},"sourceType":"module"}