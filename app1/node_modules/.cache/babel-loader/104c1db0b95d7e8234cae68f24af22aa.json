{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Grindelwald\\\\Desktop\\\\app1\\\\src\\\\components\\\\AdvancedTimer.js\";\nimport React, { Component } from 'react';\nimport Time from '../lib/Time';\nimport KeyPad from './KeyPad';\n\nclass AdvancedTimer extends Component {\n  constructor(props) {\n    super(props);\n\n    this.onFocusChange = Unit => {\n      console.log(Unit);\n      this.setState({\n        timeUnit: Unit\n      });\n    };\n\n    this.InputHandler = time => {\n      if (time && this.state.timeUnit === 'h') {\n        if (time < 0) {\n          this.setState({\n            hrs: '00'\n          });\n        } else {\n          this.setState(prevState => {\n            console.log(prevState.hrs + time);\n            let hrs = parseInt(this.formatTime(prevState.hrs + time));\n            console.log(hrs);\n            return {\n              hrs: this.formatTime(hrs)\n            };\n          });\n        }\n      } else if (time && this.state.timeUnit === 'm') {\n        this.setState(prevState => {\n          let hrs = parseInt(this.formatTime(prevState.min + time));\n\n          if (hrs > 59) {\n            hrs = prevState.min;\n          }\n\n          return {\n            min: this.formatTime(hrs)\n          };\n        });\n      } else if (time && this.state.timeUnit === 's') {\n        this.setState(prevState => {\n          let hrs = parseInt(this.formatTime(prevState.min + time));\n\n          if (hrs > 59) {\n            hrs = prevState.min;\n          }\n\n          return {\n            min: this.formatTime(hrs)\n          };\n        });\n      }\n    };\n\n    this.startHandler = () => {\n      if (this.state.status !== 'start') {\n        this.interval = setInterval(() => {\n          if (this.state.time !== 0 && this.state.time > 0) {\n            this.setState(prevState => ({\n              time: prevState.time - 10\n            }));\n          } else {\n            this.setState({\n              time: 0\n            });\n            clearInterval(this.interval);\n          }\n        }, 10);\n        this.setState({\n          status: 'start'\n        });\n      }\n    };\n\n    this.stopHandler = () => {\n      console.log(this.state.time);\n\n      if (this.state.status && this.state.status === 'start') {\n        clearInterval(this.interval);\n        this.setState(prevState => {\n          return {\n            status: 'stopped'\n          };\n        });\n      }\n    };\n\n    this.resetHandler = () => {\n      clearInterval(this.interval);\n      this.setState(() => ({\n        status: null,\n        time: 0\n      }));\n    };\n\n    this.state = {\n      time: 0,\n      hrs: 0,\n      min: 0,\n      sec: 0,\n      timeUnit: null,\n      status: false\n    };\n  }\n\n  componentWillUnmount() {\n    clearInterval(this.interval);\n  }\n\n  formatTime(time) {\n    time = parseInt(time);\n    return time < 10 ? '0' + time : time.toString().slice(time.toString().length - 2);\n  }\n\n  render() {\n    const time = new Time();\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 126\n      },\n      __self: this\n    }, time.getTime(this.state.time), this.state.status !== 'start' && React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 129\n      },\n      __self: this\n    }, React.createElement(\"input\", {\n      onFocus: () => this.onFocusChange('h'),\n      value: this.state.hrs,\n      maxLength: \"2\",\n      placeholder: \"00\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 130\n      },\n      __self: this\n    }), React.createElement(\"input\", {\n      onFocus: () => this.onFocusChange('m'),\n      value: this.state.min,\n      maxLength: \"2\",\n      placeholder: \"00\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 132\n      },\n      __self: this\n    }), React.createElement(\"input\", {\n      onFocus: () => this.onFocusChange('s'),\n      value: this.state.sec,\n      maxLength: \"2\",\n      placeholder: \"00\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 134\n      },\n      __self: this\n    }), React.createElement(KeyPad, {\n      InputHandler: this.InputHandler,\n      status: this.state.status,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 136\n      },\n      __self: this\n    }), React.createElement(\"button\", {\n      className: \"btn btn-lg btn-success\",\n      onClick: this.startHandler,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 137\n      },\n      __self: this\n    }, \"start\")), React.createElement(\"button\", {\n      className: \"btn btn-lg btn-primary\",\n      onClick: this.resetHandler,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 141\n      },\n      __self: this\n    }, \"Reset\"), this.state.status === 'start' && React.createElement(\"button\", {\n      className: \"btn btn-lg btn-dark\",\n      onClick: this.stopHandler,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 143\n      },\n      __self: this\n    }, \"Stop\"));\n  }\n\n}\n\nexport default AdvancedTimer;","map":{"version":3,"sources":["C:/Users/Grindelwald/Desktop/app1/src/components/AdvancedTimer.js"],"names":["React","Component","Time","KeyPad","AdvancedTimer","constructor","props","onFocusChange","Unit","console","log","setState","timeUnit","InputHandler","time","state","hrs","prevState","parseInt","formatTime","min","startHandler","status","interval","setInterval","clearInterval","stopHandler","resetHandler","sec","componentWillUnmount","toString","slice","length","render","getTime"],"mappings":"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","sourcesContent":["import React,{Component} from 'react';\r\nimport Time from '../lib/Time'\r\nimport KeyPad from './KeyPad'\r\nclass AdvancedTimer extends Component {\r\n    constructor(props){\r\n        super(props)\r\n        this.state = {\r\n            time:0,\r\n            hrs:0,\r\n            min:0,\r\n            sec:0,\r\n            timeUnit:null,\r\n            status:false\r\n        }\r\n    }\r\n    componentWillUnmount() {\r\n        clearInterval(this.interval);\r\n    }\r\n    onFocusChange = (Unit) =>\r\n    {\r\n          console.log(Unit)\r\n          this.setState({\r\n            timeUnit:Unit\r\n          })\r\n    }\r\n    formatTime(time) {\r\n        time = parseInt(time);\r\n        return time < 10 ? '0' + time : time.toString().slice(time.toString().length - 2);\r\n    }\r\n    InputHandler = (time) =>\r\n    {\r\n        \r\n        \r\n        if(time&&this.state.timeUnit==='h')\r\n        {\r\n            if(time<0)\r\n            {\r\n                this.setState({\r\n                    hrs:'00'\r\n                })\r\n            }\r\n             else\r\n                {\r\n                    this.setState((prevState) => {\r\n                         console.log(prevState.hrs + time)\r\n                         let hrs = parseInt(this.formatTime(prevState.hrs + time));\r\n                         console.log(hrs)\r\n                         return ({ hrs: this.formatTime(hrs) });\r\n            })\r\n\r\n        }\r\n        }\r\n        else if (time&&this.state.timeUnit==='m') \r\n        {\r\n            this.setState((prevState) => {\r\n                \r\n                let hrs = parseInt(this.formatTime(prevState.min + time));\r\n                if(hrs>59)\r\n                {\r\n                    hrs = prevState.min\r\n                }\r\n                return ({ min: this.formatTime(hrs) });\r\n            })\r\n        }\r\n        else if(time&&this.state.timeUnit==='s')\r\n        {\r\n            this.setState((prevState) => {\r\n                \r\n                let hrs = parseInt(this.formatTime(prevState.min + time));\r\n                if(hrs>59)\r\n                {\r\n                    hrs = prevState.min\r\n                }\r\n                return ({ min: this.formatTime(hrs) });\r\n            })\r\n        }\r\n\r\n\r\n    }\r\n    startHandler = () =>\r\n    {\r\n        if(this.state.status!=='start'){\r\n            this.interval = setInterval(() => \r\n            {\r\n                if(this.state.time!==0&&this.state.time>0)\r\n                {\r\n                    this.setState((prevState) => ({time:prevState.time -10}))\r\n                }\r\n                else\r\n                {\r\n                    this.setState({\r\n                        time:0\r\n                    })\r\n                    clearInterval(this.interval);\r\n                }\r\n            },10)\r\n            this.setState({\r\n                status:'start'\r\n            });\r\n          }\r\n    }\r\n    stopHandler = () => {\r\n        console.log(this.state.time)\r\n        if (this.state.status && this.state.status === 'start') {\r\n\r\n            clearInterval(this.interval);\r\n            \r\n            this.setState((prevState) => {\r\n                return ({\r\n                    status: 'stopped',\r\n                });\r\n            });\r\n        }\r\n    }\r\n    resetHandler = () =>\r\n    {\r\n        clearInterval(this.interval);\r\n\r\n        this.setState(() => ({ status: null, time: 0 }));\r\n    }\r\n    \r\n    \r\n    render(){\r\n       const time = new Time();\r\n    return (\r\n        <div>\r\n        {time.getTime(this.state.time)}\r\n        {this.state.status!=='start' &&\r\n            <div>\r\n            <input onFocus = {() => this.onFocusChange('h')} value = {this.state.hrs} maxLength=\"2\"\r\n                                placeholder=\"00\" />\r\n            <input onFocus = {() => this.onFocusChange('m')} value = {this.state.min} maxLength=\"2\"\r\n                                placeholder=\"00\" />\r\n            <input onFocus = {() => this.onFocusChange('s')} value = {this.state.sec} maxLength=\"2\"\r\n                                placeholder=\"00\" />\r\n             <KeyPad InputHandler={this.InputHandler} status={this.state.status} /> \r\n            <button className=\"btn btn-lg btn-success\" onClick = {this.startHandler}>start</button>\r\n            </div>\r\n        }\r\n        \r\n        <button className=\"btn btn-lg btn-primary\" onClick = {this.resetHandler}>Reset</button>\r\n        {this.state.status==='start' &&\r\n            <button className=\"btn btn-lg btn-dark\" onClick = {this.stopHandler}>Stop</button>\r\n        }\r\n        </div>\r\n        )\r\n}\r\n}\r\n\r\nexport default AdvancedTimer\r\n"]},"metadata":{},"sourceType":"module"}