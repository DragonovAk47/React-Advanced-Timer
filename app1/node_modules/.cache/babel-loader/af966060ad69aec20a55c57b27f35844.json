{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Grindelwald\\\\Desktop\\\\app1\\\\src\\\\components\\\\AdvancedTimer.js\";\nimport React, { Component } from 'react';\nimport Time from '../lib/Time';\nimport KeyPad from './KeyPad';\n\nclass AdvancedTimer extends Component {\n  constructor(props) {\n    super(props);\n\n    this.onFocusChange = Unit => {\n      this.setState({\n        timeUnit: Unit\n      });\n    };\n\n    this.InputHandler = time => {\n      console.log(this.state.timeUnit);\n\n      if (time && this.state.timeUnit === 'h') {\n        if (time < 0) {\n          this.setState({\n            hrs: '00'\n          });\n        } else {\n          this.setState(prevState => {\n            let hrs = parseInt(this.formatTime(prevState.hrs + time));\n            console.log(hrs);\n            return {\n              hrs: this.formatTime(hrs)\n            };\n          });\n        }\n      } else if (time && this.state.timeUnit === 's') {\n        if (time < 0) {\n          this.setState({\n            hrs: '00'\n          });\n        } else {\n          this.setState(prevState => {\n            console.log(prevState.sec + time);\n            let hrs = parseInt(this.formatTime(prevState.sec + time));\n            console.log(hrs);\n            return {\n              sec: this.formatTime(hrs)\n            };\n          });\n        }\n      } else if (time && this.state.timeUnit === 'm') {\n        if (time < 0) {\n          this.setState({\n            hrs: '00'\n          });\n        } else {\n          this.setState(prevState => {\n            console.log(prevState.min + time);\n            let hrs = parseInt(this.formatTime(prevState.min + time));\n            console.log(hrs);\n            return {\n              min: this.formatTime(hrs)\n            };\n          });\n        }\n      }\n    };\n\n    this.startHandler = () => {\n      if (this.state.ready) {\n        this.setState({\n          time: (this.state.hrs * 3600 + this.state.min * 60 + this.state.sec) * 1000\n        });\n      }\n\n      if (this.state.status !== 'start') {\n        this.interval = setInterval(() => {\n          if (this.state.time !== 0 && this.state.time > 0) {\n            this.setState(prevState => ({\n              time: prevState.time - 10\n            }));\n          } else {\n            this.setState({\n              time: 0\n            });\n            clearInterval(this.interval);\n          }\n        }, 10);\n        this.setState({\n          status: 'start'\n        });\n      }\n    };\n\n    this.stopHandler = () => {\n      console.log(this.state.time);\n\n      if (this.state.status && this.state.status === 'start') {\n        clearInterval(this.interval);\n        this.setState(prevState => {\n          return {\n            status: 'stopped'\n          };\n        });\n      }\n    };\n\n    this.resetHandler = () => {\n      clearInterval(this.interval);\n      this.setState(() => ({\n        status: null,\n        time: 0,\n        hrs: '00',\n        sec: '00',\n        min: '00'\n      }));\n    };\n\n    this.state = {\n      time: 0,\n      hrs: 0,\n      min: 0,\n      sec: 0,\n      timeUnit: null,\n      status: false,\n      ready: null\n    };\n  }\n\n  componentWillUnmount() {\n    clearInterval(this.interval);\n  }\n\n  formatTime(time) {\n    time = parseInt(time);\n    return time < 10 ? '0' + time : time.toString().slice(time.toString().length - 2);\n  }\n\n  render() {\n    const time = new Time();\n    let current_time = time.getTime(this.state.time);\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 151\n      },\n      __self: this\n    }, this.state.ready !== null && React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 154\n      },\n      __self: this\n    }, time.getTime(this.state.time)), this.state.status !== 'start' && React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 156\n      },\n      __self: this\n    }, React.createElement(\"input\", {\n      onFocus: () => this.onFocusChange('h'),\n      value: this.state.hrs,\n      maxLength: \"2\",\n      placeholder: \"00\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 157\n      },\n      __self: this\n    }), React.createElement(\"input\", {\n      onFocus: () => this.onFocusChange('m'),\n      value: this.state.min,\n      maxLength: \"2\",\n      placeholder: \"00\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 159\n      },\n      __self: this\n    }), React.createElement(\"input\", {\n      onFocus: () => this.onFocusChange('s'),\n      value: this.state.sec,\n      maxLength: \"2\",\n      placeholder: \"00\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 161\n      },\n      __self: this\n    }), React.createElement(KeyPad, {\n      InputHandler: this.InputHandler,\n      status: this.state.status,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 163\n      },\n      __self: this\n    }), React.createElement(\"button\", {\n      className: \"btn btn-lg btn-success\",\n      onClick: this.startHandler,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 164\n      },\n      __self: this\n    }, \"start\")), React.createElement(\"button\", {\n      className: \"btn btn-lg btn-primary\",\n      onClick: this.resetHandler,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 168\n      },\n      __self: this\n    }, \"Reset\"), this.state.status === 'start' && React.createElement(\"button\", {\n      className: \"btn btn-lg btn-dark\",\n      onClick: this.stopHandler,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 170\n      },\n      __self: this\n    }, \"Stop\"));\n  }\n\n}\n\nexport default AdvancedTimer;","map":{"version":3,"sources":["C:/Users/Grindelwald/Desktop/app1/src/components/AdvancedTimer.js"],"names":["React","Component","Time","KeyPad","AdvancedTimer","constructor","props","onFocusChange","Unit","setState","timeUnit","InputHandler","time","console","log","state","hrs","prevState","parseInt","formatTime","sec","min","startHandler","ready","status","interval","setInterval","clearInterval","stopHandler","resetHandler","componentWillUnmount","toString","slice","length","render","current_time","getTime"],"mappings":"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","sourcesContent":["import React,{Component} from 'react';\r\nimport Time from '../lib/Time'\r\nimport KeyPad from './KeyPad'\r\nclass AdvancedTimer extends Component {\r\n    constructor(props){\r\n        super(props)\r\n        this.state = {\r\n            time:0,\r\n            hrs:0,\r\n            min:0,\r\n            sec:0,\r\n            timeUnit:null,\r\n            status:false,\r\n            ready:null\r\n        }\r\n    }\r\n    componentWillUnmount() {\r\n        clearInterval(this.interval);\r\n    }\r\n    onFocusChange = (Unit) =>\r\n    {\r\n          \r\n          this.setState({\r\n            timeUnit:Unit\r\n          })\r\n    }\r\n    formatTime(time) {\r\n        time = parseInt(time);\r\n        return time < 10 ? '0' + time : time.toString().slice(time.toString().length - 2);\r\n    }\r\n    InputHandler = (time) =>\r\n    {\r\n        \r\n        console.log(this.state.timeUnit)\r\n        if(time&&this.state.timeUnit==='h')\r\n        {\r\n            if(time<0)\r\n            {\r\n                this.setState({\r\n                    hrs:'00'\r\n                })\r\n            }\r\n             else\r\n                {\r\n                    this.setState((prevState) => {\r\n                        \r\n                         let hrs = parseInt(this.formatTime(prevState.hrs + time));\r\n                         console.log(hrs)\r\n                         return ({ hrs: this.formatTime(hrs) });\r\n            })\r\n\r\n        }\r\n        }\r\n         else if(time&&this.state.timeUnit==='s')\r\n        {\r\n             if(time<0)\r\n            {\r\n                this.setState({\r\n                    hrs:'00'\r\n                })\r\n            }\r\n             else\r\n                {\r\n                    this.setState((prevState) => {\r\n                         console.log(prevState.sec + time)\r\n                         let hrs = parseInt(this.formatTime(prevState.sec + time));\r\n                         console.log(hrs)\r\n                         return ({ sec: this.formatTime(hrs),\r\n                                                      });\r\n            })\r\n\r\n        }\r\n        }\r\n        else if (time&&this.state.timeUnit==='m') \r\n        {\r\n             if(time<0)\r\n            {\r\n                this.setState({\r\n                    hrs:'00'\r\n                })\r\n            }\r\n             else\r\n                {\r\n                    this.setState((prevState) => {\r\n                         console.log(prevState.min + time)\r\n                         let hrs = parseInt(this.formatTime(prevState.min + time));\r\n                         console.log(hrs)\r\n                         return ({ min: this.formatTime(hrs) });\r\n            })\r\n\r\n        }\r\n        }\r\n       \r\n\r\n\r\n    }\r\n    startHandler = () =>\r\n    {\r\n        if(this.state.ready)\r\n        {\r\n           this.setState({\r\n            time : (this.state.hrs*3600+this.state.min*60+this.state.sec)*1000\r\n           })\r\n        }\r\n\r\n        if(this.state.status!=='start'){\r\n            this.interval = setInterval(() => \r\n            {\r\n                if(this.state.time!==0&&this.state.time>0)\r\n                {\r\n                    this.setState((prevState) => ({time:prevState.time -10}))\r\n                }\r\n                else\r\n                {\r\n                    this.setState({\r\n                        time:0\r\n                    })\r\n                    clearInterval(this.interval);\r\n                }\r\n            },10)\r\n            this.setState({\r\n                status:'start'\r\n            });\r\n          }\r\n    }\r\n    stopHandler = () => {\r\n        console.log(this.state.time)\r\n        if (this.state.status && this.state.status === 'start') {\r\n\r\n            clearInterval(this.interval);\r\n            \r\n            this.setState((prevState) => {\r\n                return ({\r\n                    status: 'stopped',\r\n                });\r\n            });\r\n        }\r\n    }\r\n    resetHandler = () =>\r\n    {\r\n        clearInterval(this.interval);\r\n\r\n        this.setState(() => ({ status: null, time: 0,hrs:'00',sec:'00',min:'00' }));\r\n    }\r\n    \r\n    \r\n    render(){\r\n       const time = new Time();\r\n       let current_time = time.getTime(this.state.time)\r\n    return (\r\n        <div>\r\n        {this.state.ready!==null &&\r\n\r\n            <p>{time.getTime(this.state.time)}</p>}\r\n        {this.state.status!=='start' &&\r\n            <div>\r\n            <input onFocus = {() => this.onFocusChange('h')} value = {this.state.hrs} maxLength=\"2\"\r\n                                placeholder=\"00\" />\r\n            <input onFocus = {() => this.onFocusChange('m')} value = {this.state.min} maxLength=\"2\"\r\n                                placeholder=\"00\" />\r\n            <input onFocus = {() => this.onFocusChange('s')} value = {this.state.sec} maxLength=\"2\"\r\n                                placeholder=\"00\" />\r\n             <KeyPad InputHandler={this.InputHandler} status={this.state.status} /> \r\n            <button className=\"btn btn-lg btn-success\" onClick = {this.startHandler}>start</button>\r\n            </div>\r\n        }\r\n        \r\n        <button className=\"btn btn-lg btn-primary\" onClick = {this.resetHandler}>Reset</button>\r\n        {this.state.status==='start' &&\r\n            <button className=\"btn btn-lg btn-dark\" onClick = {this.stopHandler}>Stop</button>\r\n        }\r\n        </div>\r\n        )\r\n}\r\n}\r\n\r\nexport default AdvancedTimer\r\n"]},"metadata":{},"sourceType":"module"}