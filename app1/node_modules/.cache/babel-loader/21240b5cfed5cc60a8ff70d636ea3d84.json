{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Grindelwald\\\\Desktop\\\\app1\\\\src\\\\components\\\\ReactTimer.js\";\nimport React, { Component } from 'react';\nimport Time from '../lib/Time';\n\nclass ReactTimer extends Component {\n  constructor(props) {\n    super(props);\n\n    this.InputHandler = event => {\n      const seconds = parseInt(event.target.value);\n\n      if (seconds && typeof seconds === 'number') {\n        this.setState({\n          time: seconds\n        });\n      } else {\n        this.setState(() => ({\n          time: 0\n        }));\n      }\n    };\n\n    this.startHandler = () => {\n      if (this.state.status !== 'start') {\n        this.interval = setInterval(() => {\n          if (this.state.time !== 0) {\n            this.setState(prevState => ({\n              time: prevState.time - 10\n            }));\n          } else {\n            this.setState(() => ({\n              status: null,\n              time: 0\n            }));\n            clearInterval(this.interval);\n          }\n        }, 10);\n        this.setState(() => ({\n          status: 'start'\n        }));\n      }\n    };\n\n    this.stopTimer = () => {\n      if (this.state.status && this.state.status === 'started') {\n        clearInterval(this.interval);\n        this.setState(prevState => {\n          return {\n            status: 'stopped'\n          };\n        });\n      }\n    };\n\n    this.resetHandler = () => {\n      clearInterval(this.interval);\n      this.setState(() => ({\n        status: null,\n        time: 0\n      }));\n    };\n\n    this.state = {\n      time: 0,\n      status: false\n    };\n  }\n\n  componentWillUnmount() {\n    clearInterval(this.interval);\n  }\n\n  render() {\n    const time = new Time();\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 66\n      },\n      __self: this\n    }, React.createElement(\"input\", {\n      type: \"text\",\n      value: this.state.time,\n      onChange: this.InputHandler,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 67\n      },\n      __self: this\n    }), time.getTime(this.state.time), React.createElement(\"button\", {\n      onClick: this.startHandler,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 69\n      },\n      __self: this\n    }, \"start\"), React.createElement(\"button\", {\n      onClick: this.resetHandler,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 70\n      },\n      __self: this\n    }, \"Reset\"), React.createElement(\"button\", {\n      onClick: this.stopTimer,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 71\n      },\n      __self: this\n    }, \"Stop\"));\n  }\n\n}\n\nexport default ReactTimer;","map":{"version":3,"sources":["C:/Users/Grindelwald/Desktop/app1/src/components/ReactTimer.js"],"names":["React","Component","Time","ReactTimer","constructor","props","InputHandler","event","seconds","parseInt","target","value","setState","time","startHandler","state","status","interval","setInterval","prevState","clearInterval","stopTimer","resetHandler","componentWillUnmount","render","getTime"],"mappings":"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","sourcesContent":["import React,{Component} from 'react';\r\nimport Time from '../lib/Time'\r\nclass ReactTimer extends Component {\r\n    constructor(props){\r\n        super(props)\r\n        this.state = {\r\n            time:0,\r\n            status:false\r\n        }\r\n    }\r\n    componentWillUnmount() {\r\n        clearInterval(this.interval);\r\n    }\r\n    InputHandler = (event) =>\r\n    {\r\n\r\n        const seconds = parseInt(event.target.value);\r\n        if (seconds && typeof seconds === 'number')\r\n        {this.setState({\r\n            time:seconds,\r\n        })}\r\n        else {\r\n            this.setState(() => ({ time: 0 }));\r\n        }\r\n\r\n    }\r\n    startHandler = () =>\r\n    {\r\n        if (this.state.status !== 'start') {\r\n            this.interval = setInterval(() => {\r\n                if (this.state.time !== 0) {\r\n                    this.setState(prevState => ({ time: prevState.time - 10 }));\r\n                } else {\r\n                    this.setState(() => ({status: null, time: 0 }));\r\n\r\n                    clearInterval(this.interval);\r\n                }\r\n            }, 10);\r\n\r\n            this.setState(() => ({ status: 'start' }));\r\n        }\r\n    }\r\n    stopTimer = () => {\r\n        if (this.state.status && this.state.status === 'started') {\r\n\r\n            clearInterval(this.interval);\r\n\r\n            this.setState((prevState) => {\r\n                return ({\r\n                    status: 'stopped',\r\n                });\r\n            });\r\n        }\r\n    }\r\n    resetHandler = () =>\r\n    {\r\n        clearInterval(this.interval);\r\n\r\n        this.setState(() => ({ status: null, time: 0 }));\r\n    }\r\n    \r\n    \r\n    render(){\r\n       const time = new Time();\r\n    return (\r\n        <div>\r\n        <input type = \"text\" value = {this.state.time} onChange = {this.InputHandler} />\r\n        {time.getTime(this.state.time)}\r\n        <button onClick = {this.startHandler}>start</button>\r\n        <button onClick = {this.resetHandler}>Reset</button>\r\n        <button onClick = {this.stopTimer}>Stop</button>\r\n        </div>\r\n        )\r\n}\r\n}\r\n\r\nexport default ReactTimer\r\n"]},"metadata":{},"sourceType":"module"}